"""Add transactions, transaction_shares, expense_categories tables

Revision ID: 93c167e14543
Revises: b322c84267dc
Create Date: 2025-06-23 20:08:48.513571

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '93c167e14543'
down_revision: Union[str, None] = 'b322c84267dc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('expense_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False, comment="Название категории (например, 'Еда')"),
    sa.Column('icon', sa.String(), nullable=True, comment="Иконка или emoji категории (например, '🍕' или 'food')"),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_expense_categories_id'), 'expense_categories', ['id'], unique=False)
    op.create_table('friends',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('friend_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['friend_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'friend_id', name='_user_friend_uc')
    )
    op.create_index(op.f('ix_friends_id'), 'friends', ['id'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False, comment='ID группы, к которой относится транзакция'),
    sa.Column('created_by', sa.Integer(), nullable=False, comment='Пользователь, создавший транзакцию'),
    sa.Column('type', sa.String(), nullable=False, comment="'expense' — расход, 'transfer' — перевод (транш)"),
    sa.Column('amount', sa.Float(), nullable=False, comment='Сумма транзакции'),
    sa.Column('date', sa.DateTime(), nullable=False, comment='Дата расхода/транша'),
    sa.Column('comment', sa.String(), nullable=True, comment='Комментарий или описание'),
    sa.Column('category_id', sa.Integer(), nullable=True, comment="Категория расхода (только для type='expense')"),
    sa.Column('paid_by', sa.Integer(), nullable=True, comment='Кто оплатил (для расходов)'),
    sa.Column('split_type', sa.String(), nullable=True, comment="Тип деления ('equal', 'shares', 'custom')"),
    sa.Column('transfer_from', sa.Integer(), nullable=True, comment="Отправитель денег (только для type='transfer')"),
    sa.Column('transfer_to', sa.JSON(), nullable=True, comment='Список получателей (user_id), для transfer — один или несколько, JSON-массив'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата и время создания'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Дата и время последнего изменения'),
    sa.Column('currency', sa.String(), nullable=True, comment='Валюта транзакции, по умолчанию RUB'),
    sa.Column('is_deleted', sa.Boolean(), nullable=True, comment='Признак soft delete (архивирования)'),
    sa.Column('receipt_url', sa.String(), nullable=True, comment='Ссылка на файл чека (если прикреплён)'),
    sa.Column('receipt_data', sa.JSON(), nullable=True, comment='Результат распознавания чека (массив товаров, итог и т.д.)'),
    sa.ForeignKeyConstraint(['category_id'], ['expense_categories.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['paid_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['transfer_from'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_table('transaction_shares',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=False, comment='ID транзакции'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Участник группы'),
    sa.Column('amount', sa.Float(), nullable=False, comment='Сумма, которую должен этот участник'),
    sa.Column('shares', sa.Integer(), nullable=True, comment="Кол-во долей (если split_type='shares')"),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transaction_shares_id'), 'transaction_shares', ['id'], unique=False)
    op.create_index(op.f('ix_group_members_id'), 'group_members', ['id'], unique=False)
    op.create_index(op.f('ix_groups_id'), 'groups', ['id'], unique=False)
    op.create_index(op.f('ix_groups_name'), 'groups', ['name'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_groups_name'), table_name='groups')
    op.drop_index(op.f('ix_groups_id'), table_name='groups')
    op.drop_index(op.f('ix_group_members_id'), table_name='group_members')
    op.drop_index(op.f('ix_transaction_shares_id'), table_name='transaction_shares')
    op.drop_table('transaction_shares')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_friends_id'), table_name='friends')
    op.drop_table('friends')
    op.drop_index(op.f('ix_expense_categories_id'), table_name='expense_categories')
    op.drop_table('expense_categories')
    # ### end Alembic commands ###
